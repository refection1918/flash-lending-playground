// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "./connext__bscscan__common.sol";

contract connext_bscscan_LP_Test is ConnextCommon {
    using SafeMath for uint256;

    function setUp() public override {
        super.setUp();

        cheats.createSelectFork("bsc", 29004971);

        // Pre-load tokens
        // writeTokenBalance(address(this), fl_token, payback_fee_amount);
    }

    // ----------------------------------------------------------------------------
    // Signature Replay
    // ----------------------------------------------------------------------------
    // https://explorer.phalcon.xyz/tx/bsc/0x9a171d008a899d2ef6bfee7cb86fdf768be1d118ae4ff959fd058e19a8e80671
    function test__execute_replay_1() public {
        cheats.expectRevert(0x7c32a2b3);

        // Impersonate as 0x935AaAe0f5b02007c08512F0629a9d37Af2E1A47
        cheats.prank(address(0x935AaAe0f5b02007c08512F0629a9d37Af2E1A47));

        bytes memory callData = hex"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000e5d55ffcfe2191b71464dd7df76d18d8482ba9be000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000001111111254eeb25477b68fb85ed929f73a9605820000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044f9339695fc8d0700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000024812aa3caf00000000000000000000000014831f12fccc86c4f3dae41c769593df766e43530000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000014831f12fccc86c4f3dae41c769593df766e4353000000000000000000000000dd1305150d27aecc60c066630105db419977e36700000000000000000000000000000000000000000000000044f9339695fc8d0700000000000000000000000000000000000000000000000000434916224dd942000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000a100008b00004f02a00000000000000000000000000000000000000000000000000042f2873a92ecc0ee63c1e5015289a8dbf7029ee0b0498a84777ed3941d9acfec8ac76a51cc950d9822d68b83fe1ad97b32cd580d4101bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a960582002e9b3012000000000000000000000000000000000000000000000000";

        TransferInfo memory params = TransferInfo(
            1886350457,
            6450786,
            6648936,
            address(Receiver),
            address(delegate),
            false,
            callData,
            50,
            address(LiFiDiamond),
            4995154,
            5000000000000000000,
            50979,
            0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
        );

        address[] memory routers = new address[](1);
        routers[0] = address(router);

        bytes[] memory routerSignatures = new bytes[](1);
        routerSignatures[0] = hex"96b4d258b5c8309b082815d7d4f6c39c8d133a51a87569e622ed5dbac83241cd43b0397f2688e2d64a93204abb6a7a09de787f129edb7f93a92714d4938630a41c";

        ExecuteArgs memory _args = ExecuteArgs(
            params,
            routers,
            routerSignatures,
            address(sequencer),
            hex"75d3ef1ecb8e6155a3b31007891756ad7a68159826d01559330e22595d7b2b9a3a3a53c88886754b1479cdca46508d172d837809b28a640d2718fb9b33df29261c"
        );
        BridgeFacet.execute(_args);
    }

    // ----------------------------------------------------------------------------
    // Withdrawal
    // ----------------------------------------------------------------------------
    function skip_test__finalizeERC20Withdrawal() public {
        // cheats.expectRevert("xDomainMessageSender is not set");

        // Impersonate as Proxy_OVM_L1CrossDomainMessenger
        // cheats.prank(address(Proxy_OVM_L1CrossDomainMessenger));
    }
}